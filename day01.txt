下载msi
下一步下一步安装即可

打开窗口
shift+右键
查看版本
node -v
执行js文件 一定要在那个文件的目录
node xx.js

全局path路径

在电脑配置好之后  窗口运行的时候 会
先在当前目录找 找不到就去配置的path路径里面找
如果还找不到 就报错 

我的电脑-》右键 属性 -》高级系统管理-》环境变量
-》系统变量里面的 path

let 类似var 声明变量
1. 没有预解析 必须先声明在使用
2  不能重复声明
3  {}里面使用let 就只能{ }里面使用

const 类似let  他声明的数据是不能修改的
const a=1 那么a永远是1 你一改就报错

let p={ name:'zs',age:18 }

let {name:abc,age}=p  从p里面拿出name和age赋值使用
如果要改名字就 :新名字

str.startsWith('a') 看是否以a开头 是true 不是false
str.endsWith('.css') 看是否以.css结尾 是true 不是false

模板字符串
let  str='123'
反引号
	` hfuiewfhuhk${str}hsdbuigdguwhdud   `

要使用变量 必须在里面 ${ 变量名 }

（补0）
padStart(6,'0')
字符串总共6位  没有6位 前面用0拼接好 
如果已经是6位了 就不做任何事
padEnd(6,'0')



箭头函数默认都是匿名函数 需要赋值给一个名字 add 

let add=(x,y)=>{
  		return x+y
	}

add(1,2)
没有参数
()=>{
  
}
有一个参数
x=>{
   return x
}

有一个参数 有一句话返回
let  fn=   x=>x
fn(123)

箭头函数的this 函数体{}里面的this和外面的一样

let fn=(a,...arr)=>{ 
 //arr传进来的 除了a之外的剩余参数组成的数组
	console.log(arr) //[2,3,4]
}
fn(1,2,3,4)


//在函数定义的...是剩余参数的意思
//其他地方...代表把每一项 一个一个拿出来放在对应位置
扩展运算符
let arr=[4,5,6]
...arr































node 开发环境
var 
let
写法变得高级了


全局的path环境变量

安装的软件 
默认只能在对应的安装目录 打开 xx.exe这样打开
但是如果我想
在所有的地方都可以运行xx.exe 然后打开
需要配置全局path


在运行的时候 命令行窗口 会在当前目录找 没有 就去全局的path找  如果找到了 就运行

如果没有找到  报错 （不是内部或外部命令）

nodejs（js语法+操作电脑的api函数  ）
           console  settimeout setinterval

repl环境 就是在命令行（黑窗口）运行代码
r 读 e 执行 p 输出 l循环
计算机 最底层 都会变成二进制  010101

nodejs js代码 可以写在 js文件里面

执行某个js文件 一定要在那个文件的目录执行
node xx.js

高级语法

预解析
在执行js代码之前 使用var声明的变量  会提前在最前面声明

命令行的一些window命令
d:  回车 去d盘
cd .. 上一级文件夹
cd xx  去xx文件夹
cls    清空面板 


let 类似于var  声明变量
let 1. 先声明后使用 2.不能重复定义 3.{}就只能在{}里面用
const 声明  这个值只能是第一个 不能改 其他和let一样

常用let 你觉得不变化的数据 使用const

模块化
把一些功能或者页面 分成很多模块

如果要做一个网站
（只需要 把网站的一个一个的模块拼接起来）
好处: 1.代码重复使用 2.可以某个模块不好 换成其他的

padStart(6,'0')  
在前面填0 字符串最后有几位 如果没有够才填
如果已经有6位了  0就不会去填  他很智能 
padEnd
   









